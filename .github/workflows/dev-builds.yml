name: Development Builds

on:
  # Run on all branches except main
  push:
    branches-ignore:
      - 'main'

jobs:
  # Set version variables
  set-version:
    name: Set Version Variables
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.set-version.outputs.version }}
      version_tag: ${{ steps.set-version.outputs.version_tag }}
      npm_tag: ${{ steps.set-version.outputs.npm_tag }}
    
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0  # Fetch all history for proper versioning
    
    - name: Set version variables
      id: set-version
      run: |
        # Default version from package.json
        BASE_VERSION=$(node -p "require('./package-tools/npm-package/package.json').version")
        
        # For dev builds, use branch name and commit hash
        BRANCH_NAME=$(echo ${{ github.ref_name }} | sed 's/[^a-zA-Z0-9]/-/g')
        SHORT_SHA=$(git rev-parse --short HEAD)
        VERSION="${BASE_VERSION}-${BRANCH_NAME}.${SHORT_SHA}"
        VERSION_TAG="dev"
        NPM_TAG="dev-${BRANCH_NAME}"
        
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "version_tag=${VERSION_TAG}" >> $GITHUB_OUTPUT
        echo "npm_tag=${NPM_TAG}" >> $GITHUB_OUTPUT
        
        echo "Version: ${VERSION}"
        echo "Version Tag: ${VERSION_TAG}"
        echo "NPM Tag: ${NPM_TAG}"

  build-npm-package:
    name: Build NPM Package
    needs: set-version
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]  # Use only Ubuntu for dev builds to save resources
        node-version: [20.x] # Use only the latest Node.js version for dev builds

    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        registry-url: 'https://registry.npmjs.org'
    
    - name: Update version in package.json
      working-directory: package-tools/npm-package
      run: |
        sed -i 's/"version": ".*"/"version": "${{ needs.set-version.outputs.version }}"/g' package.json
    
    - name: Install dependencies
      working-directory: package-tools/npm-package
      run: npm ci || npm install
    
    - name: Run tests
      working-directory: package-tools/npm-package
      run: npm test
    
    - name: Create test package
      working-directory: package-tools/npm-package
      run: npm pack
    
    - name: Upload NPM package artifact
      uses: actions/upload-artifact@v4
      with:
        name: npm-package-dev-build
        path: package-tools/npm-package/*.tgz
    
    - name: Publish NPM package
      working-directory: package-tools/npm-package
      run: npm publish --tag ${{ needs.set-version.outputs.npm_tag }} --access public
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

# Temporarily commented out the NuGet package build
# build-nuget-package:
#   name: Build NuGet Package
#   needs: set-version
#   runs-on: ${{ matrix.os }}
#   strategy:
#     matrix:
#       os: [ubuntu-latest]  # Use only Ubuntu for dev builds to save resources
#       dotnet-version: ['8.0.x'] # Use only the latest .NET version for dev builds
# 
#   steps:
#   - uses: actions/checkout@v3
#   
#   - name: Setup .NET ${{ matrix.dotnet-version }}
#     uses: actions/setup-dotnet@v3
#     with:
#       dotnet-version: ${{ matrix.dotnet-version }}
#       source-url: https://api.nuget.org/v3/index.json
#     env:
#       NUGET_AUTH_TOKEN: ${{ secrets.NUGET_API_KEY }}
#   
#   - name: Update version in project file
#     working-directory: package-tools/nuget-package
#     run: |
#       sed -i 's/<Version>.*<\/Version>/<Version>${{ needs.set-version.outputs.version }}<\/Version>/g' ClinerRules.csproj
#   
#   - name: Build NuGet package
#     working-directory: package-tools/nuget-package
#     run: dotnet build
#   
#   - name: Pack NuGet package
#     working-directory: package-tools/nuget-package
#     run: dotnet pack -c Release
#   
#   - name: Run tests
#     working-directory: package-tools/nuget-package/test
#     run: |
#       chmod +x ./test-install.sh
#       ./test-install.sh
#   
#   - name: Upload NuGet package artifact
#     uses: actions/upload-artifact@v4
#     with:
#       name: nuget-package-dev-build
#       path: package-tools/nuget-package/bin/Release/*.nupkg
#   
#   - name: Publish NuGet package
#     working-directory: package-tools/nuget-package
#     run: dotnet nuget push bin/Release/*.nupkg --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json